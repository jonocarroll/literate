{
  "name": "Literate",
  "tagline": "Taking literate programming one step further, down into the code itself",
  "body": "<html><br /><title=literate.ks.test><br /><body><br />literate.ks.test <- function&nbsp;(x,&nbsp;y,&nbsp;...,&nbsp;alternative&nbsp;=&nbsp;c(\"two.sided\",&nbsp;\"less\",&nbsp;\"greater\"),&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exact&nbsp;=&nbsp;NULL)&nbsp;<br />{<br /><br />#%&nbsp;<a id=checking><b><emph>checking</emph></b></a><br />#%&nbsp;perform input checking. \r\n  <br />#% This comment is very long\r\n  <br />#% and spans multiple lines. Processing needs \r\n  <br />#% to be able to handle this.&nbsp;<a href=#basecase> next block </a>&nbsp;<br /><br /><br /><br /><br />&nbsp;&nbsp;alternative&nbsp;<-&nbsp;match.arg(alternative)<br />&nbsp;&nbsp;DNAME&nbsp;<-&nbsp;deparse(substitute(x))<br />&nbsp;&nbsp;x&nbsp;<-&nbsp;x[!is.na(x)]<br />&nbsp;&nbsp;n&nbsp;<-&nbsp;length(x)<br />&nbsp;&nbsp;if&nbsp;(n&nbsp;<&nbsp;1L)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;stop(\"not&nbsp;enough&nbsp;'x'&nbsp;data\")<br />&nbsp;&nbsp;PVAL&nbsp;<-&nbsp;NULL<br /><br />#%&nbsp;<a id=basecase><b><emph>basecase</emph></b></a><br />#%&nbsp;define the base case to use&nbsp;<a href=#pvalue> next block </a>&nbsp;<br /><br />&nbsp;&nbsp;if&nbsp;(is.numeric(y))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;DNAME&nbsp;<-&nbsp;paste(DNAME,&nbsp;\"and\",&nbsp;deparse(substitute(y)))<br />&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;<-&nbsp;y[!is.na(y)]<br />&nbsp;&nbsp;&nbsp;&nbsp;n.x&nbsp;<-&nbsp;as.double(n)<br />&nbsp;&nbsp;&nbsp;&nbsp;n.y&nbsp;<-&nbsp;length(y)<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(n.y&nbsp;<&nbsp;1L)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop(\"not&nbsp;enough&nbsp;'y'&nbsp;data\")<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is.null(exact))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exact&nbsp;<-&nbsp;(n.x&nbsp;*&nbsp;n.y&nbsp;<&nbsp;10000)<br />&nbsp;&nbsp;&nbsp;&nbsp;METHOD&nbsp;<-&nbsp;\"Two-sample&nbsp;Kolmogorov-Smirnov&nbsp;test\"<br />&nbsp;&nbsp;&nbsp;&nbsp;TIES&nbsp;<-&nbsp;FALSE<br />&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;<-&nbsp;n.x&nbsp;*&nbsp;n.y/(n.x&nbsp;+&nbsp;n.y)<br />&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;<-&nbsp;c(x,&nbsp;y)<br />&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;<-&nbsp;cumsum(ifelse(order(w)&nbsp;<=&nbsp;n.x,&nbsp;1/n.x,&nbsp;-1/n.y))<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(length(unique(w))&nbsp;<&nbsp;(n.x&nbsp;+&nbsp;n.y))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(exact)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;warning(\"cannot&nbsp;compute&nbsp;exact&nbsp;p-value&nbsp;with&nbsp;ties\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exact&nbsp;<-&nbsp;FALSE<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;warning(\"p-value&nbsp;will&nbsp;be&nbsp;approximate&nbsp;in&nbsp;the&nbsp;presence&nbsp;of&nbsp;ties\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;<-&nbsp;z[c(which(diff(sort(w))&nbsp;!=&nbsp;0),&nbsp;n.x&nbsp;+&nbsp;n.y)]<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIES&nbsp;<-&nbsp;TRUE<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;STATISTIC&nbsp;<-&nbsp;switch(alternative,&nbsp;two.sided&nbsp;=&nbsp;max(abs(z)),&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greater&nbsp;=&nbsp;max(z),&nbsp;less&nbsp;=&nbsp;-min(z))<br />&nbsp;&nbsp;&nbsp;&nbsp;nm_alternative&nbsp;<-&nbsp;switch(alternative,&nbsp;two.sided&nbsp;=&nbsp;\"two-sided\",&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;less&nbsp;=&nbsp;\"the&nbsp;CDF&nbsp;of&nbsp;x&nbsp;lies&nbsp;below&nbsp;that&nbsp;of&nbsp;y\",&nbsp;greater&nbsp;=&nbsp;\"the&nbsp;CDF&nbsp;of&nbsp;x&nbsp;lies&nbsp;above&nbsp;that&nbsp;of&nbsp;y\")<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(exact&nbsp;&&&nbsp;(alternative&nbsp;==&nbsp;\"two.sided\")&nbsp;&&&nbsp;!TIES)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PVAL&nbsp;<-&nbsp;1&nbsp;-&nbsp;.Call(stats:::C_pSmirnov2x,&nbsp;STATISTIC,&nbsp;n.x,&nbsp;n.y)<br />&nbsp;&nbsp;}<br />&nbsp;&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is.character(y))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;<-&nbsp;get(y,&nbsp;mode&nbsp;=&nbsp;\"function\",&nbsp;envir&nbsp;=&nbsp;parent.frame())<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!is.function(y))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop(\"'y'&nbsp;must&nbsp;be&nbsp;numeric&nbsp;or&nbsp;a&nbsp;function&nbsp;or&nbsp;a&nbsp;string&nbsp;naming&nbsp;a&nbsp;valid&nbsp;function\")<br />&nbsp;&nbsp;&nbsp;&nbsp;METHOD&nbsp;<-&nbsp;\"One-sample&nbsp;Kolmogorov-Smirnov&nbsp;test\"<br />&nbsp;&nbsp;&nbsp;&nbsp;TIES&nbsp;<-&nbsp;FALSE<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(length(unique(x))&nbsp;<&nbsp;n)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;warning(\"ties&nbsp;should&nbsp;not&nbsp;be&nbsp;present&nbsp;for&nbsp;the&nbsp;Kolmogorov-Smirnov&nbsp;test\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIES&nbsp;<-&nbsp;TRUE<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is.null(exact))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exact&nbsp;<-&nbsp;(n&nbsp;<&nbsp;100)&nbsp;&&&nbsp;!TIES<br />&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;<-&nbsp;y(sort(x),&nbsp;...)&nbsp;-&nbsp;(0:(n&nbsp;-&nbsp;1))/n<br />&nbsp;&nbsp;&nbsp;&nbsp;STATISTIC&nbsp;<-&nbsp;switch(alternative,&nbsp;two.sided&nbsp;=&nbsp;max(c(x,&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1/n&nbsp;-&nbsp;x)),&nbsp;greater&nbsp;=&nbsp;max(1/n&nbsp;-&nbsp;x),&nbsp;less&nbsp;=&nbsp;max(x))<br />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(exact)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PVAL&nbsp;<-&nbsp;1&nbsp;-&nbsp;if&nbsp;(alternative&nbsp;==&nbsp;\"two.sided\")&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Call(C_pKolmogorov2x,&nbsp;STATISTIC,&nbsp;n)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pkolmogorov1x&nbsp;<-&nbsp;function(x,&nbsp;n)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x&nbsp;<=&nbsp;0)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x&nbsp;>=&nbsp;1)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(1)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j&nbsp;<-&nbsp;seq.int(from&nbsp;=&nbsp;0,&nbsp;to&nbsp;=&nbsp;floor(n&nbsp;*&nbsp;(1&nbsp;-&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x)))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;-&nbsp;x&nbsp;*&nbsp;sum(exp(lchoose(n,&nbsp;j)&nbsp;+&nbsp;(n&nbsp;-&nbsp;j)&nbsp;*&nbsp;log(1&nbsp;-&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;-&nbsp;j/n)&nbsp;+&nbsp;(j&nbsp;-&nbsp;1)&nbsp;*&nbsp;log(x&nbsp;+&nbsp;j/n)))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pkolmogorov1x(STATISTIC,&nbsp;n)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;nm_alternative&nbsp;<-&nbsp;switch(alternative,&nbsp;two.sided&nbsp;=&nbsp;\"two-sided\",&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;less&nbsp;=&nbsp;\"the&nbsp;CDF&nbsp;of&nbsp;x&nbsp;lies&nbsp;below&nbsp;the&nbsp;null&nbsp;hypothesis\",&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greater&nbsp;=&nbsp;\"the&nbsp;CDF&nbsp;of&nbsp;x&nbsp;lies&nbsp;above&nbsp;the&nbsp;null&nbsp;hypothesis\")<br />&nbsp;&nbsp;}<br /><br />#%&nbsp;<a id=pvalue><b><emph>pvalue</emph></b></a><br />#%&nbsp;calculate C_pKS2 but refer to <a href=#basecase>basecase</a> for reference&nbsp;<a href=#returnstructure> next block </a>&nbsp;<br /><br />&nbsp;&nbsp;names(STATISTIC)&nbsp;<-&nbsp;switch(alternative,&nbsp;two.sided&nbsp;=&nbsp;\"D\",&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;greater&nbsp;=&nbsp;\"D^+\",&nbsp;less&nbsp;=&nbsp;\"D^-\")<br />&nbsp;&nbsp;if&nbsp;(is.null(PVAL))&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;pkstwo&nbsp;<-&nbsp;function(x,&nbsp;tol&nbsp;=&nbsp;1e-06)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is.numeric(x))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;<-&nbsp;as.double(x)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;stop(\"argument&nbsp;'x'&nbsp;must&nbsp;be&nbsp;numeric\")<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;<-&nbsp;rep(0,&nbsp;length(x))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[is.na(x)]&nbsp;<-&nbsp;NA<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IND&nbsp;<-&nbsp;which(!is.na(x)&nbsp;&&nbsp;(x&nbsp;>&nbsp;0))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(length(IND))&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[IND]&nbsp;<-&nbsp;.Call(C_pKS2,&nbsp;p&nbsp;=&nbsp;x[IND],&nbsp;tol)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;PVAL&nbsp;<-&nbsp;ifelse(alternative&nbsp;==&nbsp;\"two.sided\",&nbsp;1&nbsp;-&nbsp;pkstwo(sqrt(n)&nbsp;*&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATISTIC),&nbsp;exp(-2&nbsp;*&nbsp;n&nbsp;*&nbsp;STATISTIC^2))<br />&nbsp;&nbsp;}<br /><br />#%&nbsp;<a id=returnstructure><b><emph>returnstructure</emph></b></a><br />#%&nbsp;generate the return structure&nbsp;<a href=#end> next block </a>&nbsp;<br /><br />&nbsp;&nbsp;PVAL&nbsp;<-&nbsp;min(1,&nbsp;max(0,&nbsp;PVAL))<br />&nbsp;&nbsp;RVAL&nbsp;<-&nbsp;list(statistic&nbsp;=&nbsp;STATISTIC,&nbsp;p.value&nbsp;=&nbsp;PVAL,&nbsp;alternative&nbsp;=&nbsp;nm_alternative,&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method&nbsp;=&nbsp;METHOD,&nbsp;data.name&nbsp;=&nbsp;DNAME)<br />&nbsp;&nbsp;class(RVAL)&nbsp;<-&nbsp;\"htest\"<br />&nbsp;&nbsp;return(RVAL)<br />}</body><br /></html>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}